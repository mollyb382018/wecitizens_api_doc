# languages : en, fr, nl, de
# what is an institution and an authority
# add path to get all elections + path for active elections
# 201 not supported by loopback 4 generation
# why not give information about the mandate of the election (how long, ...)
# TODO differentiate uuid and id (name of parameter reuse)

openapi: 3.0.0
servers:
  - url: https://olivier5741.github.io/wecitizens_api_doc/api
    description: mock
  - url: http://wecitizensapi.co-labs.be:8080/api/v1
    description: dev 
  - url: http://localhost:3000/api
    description: local
info:
  title: WeCitizens API
  version: '0.5.0'
  description: |
    WeCitizens API consists of two endpoints to sustain an electoral GPS app. 

    ## Vote (election)

    Vote is the first endpoint, it's concerned about all what gravitates around an **election**. 
    An election can have **candidates** and **parties** (parties can have a list of candidates).
    Sometimes elections run across several **districts**. 
    So there will be a main election with districts and the district election will have candidates/parties and references the main election.
    
    ## GPS (survey)

    GPS, the second endpoint, on the other way doesn't care about elections neither politics. Its purpose is to group **questions** into **surveys**. 
    For a given **poll** find the related survey and **segment** (a group of answers) to match your survey answers against. 
    Polls can be grouped into **campaigns**. 
    When the survey is completed, you can go for an answer **submission** and ask for a **match** (who corresponds to my answers).

    ## Dir (politician directory)

    Info about politicians (not yet complete)

    ## Internationalization

    > Language filtering will be available through HTTP header `Accept-Language` but not currently implemented.
    > You'll be served all languages (currently max 3 or 4)

    Election, party, district and survey have properties which depend on the language (`name`, `notice`, ...).
    The value of the property will be a reference to a key in the language dictionnary of `i18n` property.

    `i18n` is build to be fed to https://www.i18next.com/ framework

    ### Election sample

    `type_name` value references `i18n.{language}.election_type_be_municipal_name` property

    ```json
    {
      "key": "2018_be_municipal",
      "type": "be_municipal",
      "type_name": "election_type_be_municipal_name"
      "date": "2018-10-14T00:00:00.000Z",
      "district_type": "municipality",
      "i18n": {
        "en": {
          "election_type_be_municipal_name": "Municipal elections"
        },
        "fr": {
          "election_type_be_municipal_name": "Élections communales"
        },
        "nl": {
          "election_type_be_municipal_name": "Gemeentelijke verkiezingen"
        }
      }
    }
    ```  

    ## Swagger-UI

    Is available under /swagger-ui. 

    Currently only github and local servers are up to date with specs.    
    Add `.json` on the last path param to make it work for those two servers 
    (https://olivier5741.github.io/wecitizens_api_doc/api/vote/election/2018_be_municipal.json)

# Add a logo
x-tagGroups:
  - name: vote
    tags: [election, district]
  - name: gps # maybe find something more appropriate
    tags: [poll, survey, answer, match]
  - name: dir
    tags: [politician]
tags:
  - name: election
  - name: district
  - name: poll
  - name: survey
  - name: answer
  - name: match
  - name: politician
paths:
  /vote/election/{key}:
    get:
      operationId: vote_election_get
      summary: An election
      tags: [election]
      description: For first app release, GET `2018_be_municipal`
      parameters:
        - $ref: '#/components/parameters/key_path'
        - $ref: '#/components/parameters/accept_language'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/election"
              examples:
                default:
                  value:
                    key: 2018_be_municipal
                    type: be_municipal
                    type_name: election_type_be_municipal_name
                    date: 2018-10-14T00:00:00.000Z
                    district_type: municipality
                    i18n:
                      en:
                        election_type_be_municipal: Municipal elections
                      fr:
                        election_type_be_municipal: Élections communales
                      nl:
                        election_type_be_municipal: Gemeentelijke verkiezingen
  /vote/election/{main_election_key}/district/{district_key}: # not sure this is the best way to do it
    get:
      operationId: vote_election_by_district_get
      summary: A district election
      tags: [election]
      description: For first app release, set the main election key (`2018_be_municipal`) to  `main_election_key` and `district_key` depends on what the voter chose as district (drop down list)
      parameters:
        - $ref: '#/components/parameters/main_election_key_path'
        - $ref: '#/components/parameters/district_key_path'
        - $ref: '#/components/parameters/accept_language'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/election"
              examples:
                default: # TODO : adapt according to sample above 
                  value:
                    key: 2018_be_municipal_6850
                    type: be_municipal
                    type_name: election_type_be_municipal_name
                    date: 2018-10-14T00:00:00.000Z
                    main_election_key: 2018_be_municipal
                    district_key: be_municipal_6850
                    parties:
                      - key: be_6850_ecolo
                        name: be_ecolo_name
                        candidates:
                          - order: 1
                            key: patrilia.jarot
                          - order: 2
                            key: olivia.boel
                          - order: 3
                            key: clair.grantjean
                      - key: be_6850_independant
                        name: be_6850_independant_name
                        candidates:
                          - order: 1
                            key: cunot.gemard
                    candidates:
                      - key: patrilia.jarot
                        fullname: Patrilia Jarot
                        politician_id: politician_be_1048
                      - key: olivia.boal
                        fullname: Olivia Baël
                        politician_id: politician_be_1523
                      - key: clair.grantjean
                        fullname: Clair Grantjean
                        politician_id: politician_be_1430
                      - key: cunot.gemard
                        fullname: Gémard Cunot
                        politician_id: politician_be_1801
                    i18n:
                      en:
                        party_be_ecolo_name: Ecolo
                        election_type_be_municipal: Élections communales
                      nl:
                        party_be_ecolo_name: Ecolo
                        election_type_be_municipal: Gemeentelijke verkiezingen
                      fr:
                        election_type_be_municipal: Élections communales
                        party_be_ecolo_name: Ecolo
                        party_be_6850_independant: INDEPENDANT
  /vote/district/search:
    get:
      operationId: vote_district_search_get
      summary: Search districts
      tags: [district]
      description: For first app release, set the main election key (`2018_be_municipal`) to `election_key` and whether the voter enters a number or not use `code_contains` or `name_contains`
      parameters:      
        - $ref: '#/components/parameters/election_key_query'
        - $ref: '#/components/parameters/code_contains_query'
        - $ref: '#/components/parameters/name_contains_query'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/district_search_response"
              examples:
                default:
                  value:
                    data:
                      - key: be_6850
                        code: 6850
                        type: municipality
                        name: district_be_6850_name
                        district_in_keys: [be_wlx,be_wl] # I don't think it's be_wl
                      - key: be_1435
                        code: 1435
                        type: municipality
                        name: district_be_1435_name     
                        district_in_keys: [be_wbr,be_wl]                   
                    i18n:
                      fr:
                        district_be_6850_name: Paliseul
                        district_be_1435_name: Mont-Saint-Guibert
  /gps/campaign/{key}:
    get:
      operationId: gps_campaign_get
      summary: A poll campaign
      tags: [poll]
      description: For first app release, set `key` as `{main_election_key}_voter` (sample `2018_be_municipal_voter`). You need to query this to get number of submissions.
      parameters:
        - $ref: '#/components/parameters/key_path'
        - $ref: '#/components/parameters/accept_language'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/poll_campaign"
              examples:
                default:
                  value:
                    key: 2018_be_municipal_voter
                    submission_sum: 65748
  /gps/poll/{key}:
    get:
      operationId: gps_poll_get
      summary: A poll, related survey and segments
      tags: [poll]
      description: For first app release, set the poll `key` as `{main_election_key}_{district_key}_voter` (example `2018_be_municipal_be_6850_voter`)
      parameters:
        - $ref: '#/components/parameters/key_path'
        - $ref: '#/components/parameters/accept_language'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/poll"
              examples:
                default:
                  value:
                    key: 2018_be_municipal_be_6850_voter
                    survey_key: 2018_be_municipal_wallonia_rural
                    segment_keys: [2018_be_municipal_be_6850_politician,2018_be_municipal_be_6850_party]
                    insufficient_data: false
  /gps/survey/{key}:
    get:
      operationId: gps_survey_get
      summary: A survey and related questions
      tags: [survey]
      parameters:
        - $ref: '#/components/parameters/key_path'
        - $ref: '#/components/parameters/accept_language'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/survey"
              examples:
                default:
                  value:
                    key: 2018_be_municipal_wallonia_rural
                    name: survey_2018_be_municipal_wallonia_rural
                    question_order:
                      - question_2
                      - question_6
                    questions:
                      - key: question_2
                        text: question_2_text
                        answer_format: agr_5_scale_tol_3_scale_abs
                      - key: question_6
                        text: question_6_text
                        notice: question_6_notice
                        answer_format: agr_5_scale_tol_3_scale_abs
                    answer_formats: &answerFormat
                      - key: agr_5_scale_tol_3_scale_abs
                        items:
                          - key: fully_agree
                            name: answer_format_item_fully_agree
                            weight: 100
                          - key: rather_yes
                            name: answer_format_rather_yes
                            weight: 75
                          - key: no_opinion
                            name: answer_format_item_no_opinion
                            weight: 50
                          - key: rather_no
                            name: answer_format_item_rather_no
                            weight: 25
                          - key: strongly_disagree
                            name: answer_format_item_strongly_disagree
                            weight: 0
                        tolerance:
                          absolute: true
                          items:
                            - key: very_important
                              name: answer_format_tolerance_item_very_important
                              weight: 2.5
                            - key: important
                              name: answer_format_tolerance_item_important
                              weight: 1
                            - key: not_important
                              name: answer_format_tolerance_item_not_important
                              weight: 0.4
                    i18n:  
                      en:
                        question_2_text: Regions should manage their social security systems independently
                        answer_format_item_fully_agree: Fully agree # factorise this
                        answer_format_item_rather_yes: Rather yes
                        answer_format_item_no_opinion: No opinion
                        answer_format_item_rather_no: Rather no
                        answer_format_item_strongly_disagree: Strongly disagree
                        answer_format_tolerance_absolute: Absolute
                        answer_format_tolerance_item_very_important: Very important
                        answer_format_tolerance_item_important: Important
                        answer_format_tolerance_item_not_important: Not important
                      fr:
                        question_6_text: Les Régions devraient gérer de façon autonome leur sécurité sociale
                        question_6_notice: |
                          Dans le cadre de la 6° réforme de l’Etat, la totalité des recettes d’une branche de la sécurité sociale -les allocations familiales - sera transféré aux trois Régions et à la Communauté germanophone. 
                          Dans la Région de Bruxelles-Capitale, le transfert aura lieu à la Commission communautaire commune dont relève l’ensemble des francophones et des néerlandophones y domiciliés. 
                          Chaque entité pourra adopter sa propre clef de répartition et fixera, de manière autonome, ses critères de répartition en fonction des objectifs de sa politique familiale. 
                          L’ensemble des cotisations sociales (y compris celles relatives aux allocations familiales) à charges des entreprises ou des travailleurs indépendants restent, pour leur fixation et leur collecte, du ressort de l’Etat fédéral. 
                          Ceci pour éviter des différences dans les taux des cotisations sociales pouvant influencer le choix de localisation des entreprises sur base d’une surenchère entre les Régions.                        
  /gps/submission:
    post:
      operationId: gps_submission_post
      summary: Submit answers
      description: |
        > Do not fill in `segment_key` when this is a voter submission
      tags: [answer]
      requestBody:
        content:
          application/json:     
            schema:
              $ref: "#/components/schemas/submission"
            examples:
              default:
                value: &submission_example_default                  
                  poll_key: 2018_be_district_6850
                  survey_key: 2018_be_district_wallonia_rural
                  user:
                    id: 92534fc0-0773-4f16-a234-e0191e8e7214
                    age_level: under_35
                    last_election_vote_names: Gémard Cunot
                  answers: 
                    - value: strongly_no
                      tolerance: important
                      question_key: question_10
                    - value: rather_yes
                      tolerance: not_important
                      question_key: question_21
      responses:
        '200':
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/submission"
  /gps/submission/{id}:
    get:
      operationId: gps_submission_get
      summary: Inspect an answer submission
      description: Mock id `0dc3634b-5561-42d6-9b8c-c5c68b93bfd5`
      tags: [answer]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/submission"
              examples:
                default:
                  value:
                    id: 0dc3634b-5561-42d6-9b8c-c5c68b93bfd5
                    time: 2018-07-15T00:00:00.000Z
                    incomplete: true
                    <<: *submission_example_default 
    put:
      operationId: gps_submission_put
      summary: Update an answer submission
      tags: [answer]
      parameters:
        - $ref: '#/components/parameters/id_path'
      requestBody:
        content:
          application/json:     
            schema:
              $ref: "#/components/schemas/submission"
            examples:
              default:
                value:   
                  <<: *submission_example_default              
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/submission"
  /gps/match:
    post:
      operationId: gps_match_post
      summary: Find a match to your answers
      tags: [match]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/match"
            examples:
              default:
                value:
                  segment_key: 2018_be_district_6850_candidate
                  answers: 
                    - value: strongly_no
                      tolerance: important
                      question_key: question_10
                    - value: rather_yes
                      tolerance: not_important
                      question_key: question_21
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/match_response"
  /dir/politician/{id}:
    get:
      operationId: dir_politician_get
      summary: Inspect a politician
      description: |
        Info returned for politician not yet complete.
        Mock id `politician_be_1430`
      tags: [politician]
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/politician"
              examples:
                default:
                  value:
                    id: politician_be_1523
                    first_name: Clair
                    last_name: Grantjean
components:
  headers:
    Accept-Language:
      description: The languages for i18n
      schema:
        type: string
  parameters:
    accept_language:
      name: Accept-Language
      in: header      
      deprecated: true
      description: The language
      schema:
        type: array
        example: [en,fr,nl]
        items:
          type: string
    id_path:
      required: true          
      in: path
      name: id
      description: |
        A unique identifier (must be unique even across resources)
      schema:
        type: string
    key_path:
      name: key  
      description: |
        A human readable identifier with pattern matching facilities. 
        Samples : `2018_be_municipal` for an election, `be_wlx` for a district
      schema:
        type: string
        pattern: '[a-z0-9_]+'
      required: true          
      in: path
    key_query:
      name: key  
      description: |
        A human readable identifier with pattern matching facilities. 
        Samples : `2018_be_municipal` for an election, `be_6850` for a district
      schema:
        type: string
        pattern: '[a-z0-9_]+'
      required: true          
      in: query
    code_query:     
      name: code    
      in: query
      example: 6850
      schema:
        type: string    
    code_contains_query:     
      name: code_contains  
      in: query
      example: 68
      schema:
        type: string 
    main_election_key_path:
      name: main_election_key
      example: 2018_be_municipal
      schema:
        type: string
      required: true          
      in: path
    district_key_path:
      name: district_key
      description: The key of the district
      example: be_6850
      schema:
        type: string
      required: true          
      in: path
    district_type:
      name: district_type
      in: query
      description: The type of district
      example: municipality
      schema:
        type: string
        enum: [region, province, municipality]
    election_key_query:
      name: election_key      
      in: query
      schema:
        type: string
    name_query:
      name: key   
      in: query
      schema:
        type: string
    name_contains_query:
      name: name_contains      
      in: query
      schema:
        type: string
    main_district_key_query:
      name: main_district_key    
      in: query
      schema:
        type: string    
    survey_key:
      name: survey_key 
      in: query
      description: The key of the survey
      example: 2018_be_municipal_brussels
      schema:
        type: string
    segment_key:
      name: segment_key 
      in: query
      description: The key of the segment
      example: 2018_be_municipal_be_6850_politician
      schema:
        type: string
    poll_key:
      name: poll_key 
      in: query
      description: The key of the election poll
      example: 2018_be_municipal_be_6850
      schema:
        type: string
    question_key:
      name: question_key 
      in: query
      description: The key of the question
      example: question_63
      schema:
        type: string
    type_query:
      name: type     
      in: query
      schema:
        type: string
    type_in_query:
      name: type_in     
      in: query
      schema:
        type: array
        items:
          type: string
  schemas:
    id:
      type: string
      format: uuid
      description: |
        A UUID identifier 
    key:      
      type: string 
      description: |
        A human readable identifier with pattern matching facilities. 
        Samples : `2018_be_municipal` for an election, `be_wlx` for a district
      pattern: '[a-z0-9_]+'
    code:
      type: string
      example: 6850
    main_election_key:
      type: string
      example: 2018_be_municipal
    district_key:
      description: The key of the district
      example: be_6850
      type: string
    district_type:
      description: The type of district
      example: municipality
      type: string
      enum: [region, province, municipality]
    election_key:
      type: string
    name:
      type: string
    main_district_key:
      type: string    
    survey_key:
      description: The key of the survey
      example: 2018_be_municipal_brussels
      type: string
    segment_key:
      description: The key of the segment
      example: 2018_be_municipal_be_6850_politician
      type: string
    poll_key:
      description: The key of the election poll
      example: 2018_be_municipal_be_6850
      type: string
    question_key:
      description: The key of the question
      example: question_63
      type: string   
    i18n:
      type: object
      description: Scoped translations
      properties:
        en:
          type: object
        nl:
          type: object
        fr:
          type: object
        de:
          type: object
    election:
      type: object
      description: an election [main or district] with parties and candidates
      required:
        - key
      properties:
        key: 
          $ref: '#/components/schemas/key'
        type:
          type: string
          enum: [be_regional, be_municipal, be_provincial]
        type_name:
          type: string
          format: i18nref
        date: # or date ?? 2018-06 -> is ISO valid
          type: string
          format: date
        main_election_key:
          $ref: '#/components/schemas/main_election_key'
        district_type:
          $ref: '#/components/schemas/district_type'
        district_key: 
          $ref: '#/components/schemas/district_key'
        active: 
          type: boolean
        districts:
          type: array
          items:
            $ref: '#/components/schemas/election_district'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/election_party'
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/candidate'
        i18n:
          $ref: '#/components/schemas/i18n'
    election_district:
      type: object
      description: an election party with members
      properties:
        key: 
          $ref: '#/components/schemas/key'       
        code:
          $ref: '#/components/schemas/code'    
        name:
          type: string #TODO could have i18n ref format
        type:
          type: string
          enum: [region,province,municipality]
    election_party:
      type: object
      description: an election party with members
      properties:
        key:
          $ref: '#/components/schemas/key' 
        name:
          type: string
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/election_party_candidate'
        substitutes:
          type: array
          items:
            $ref: '#/components/schemas/election_party_candidate'
    election_party_candidate:
      type: object
      description: An election party member
      properties:
        order:
          type: integer
        key:
          $ref: '#/components/schemas/key' 
    candidate: # they use election_roll
      type: object
      description: An election candidate
      properties:
        key:
          $ref: '#/components/schemas/key' 
        name:
          type: string    
        picture:
          type: string # maybe URI is possible   
        politician_id:
          type: string
        politician_url:
          type: string
    start_limit_search_response_i:
      type: object
      properties:
        start:
          type: integer  
          description: paging first item where to begin the page
        limit:
          type: integer              
          description: paging max amount of items
    i18n_i:
      properties:
        i18n:
          $ref: '#/components/schemas/i18n'
    candidate_search_response:
      allOf:
        - $ref: '#/components/schemas/start_limit_search_response_i'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/candidate'
    party_search_response:
      allOf:
        - $ref: '#/components/schemas/start_limit_search_response_i'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/election_party'
            i18n:
              $ref: '#/components/schemas/i18n'
    district_search_response:
      allOf:
        - $ref: '#/components/schemas/start_limit_search_response_i'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/district_search_response_item'        
        - $ref: '#/components/schemas/i18n_i'
    district_search_response_item: # TODO should find shorter name
      type: object
      properties:
        key:
          type: string        
        code:
          type: string #TODO is integer suitable
        type:
          type: string 
        name:
          type: string #TODO could have i18n ref format
        district_in_keys:
          deprecated: true
          type: array
          items:
            type: string
    poll_campaign:
      type: object
      description: a poll campaign
      properties:
        key: 
          $ref: '#/components/schemas/key'
    poll:
      type: object
      description: a poll
      properties:
        key: 
          $ref: '#/components/schemas/key'
        survey_key: 
          $ref: '#/components/schemas/survey_key'
        segment_keys:
          type: array
          items:
            $ref: '#/components/schemas/segment_key'
        insufficient_data:
          type: boolean
          description: whether there is enough registered candidates for the voter to do the survey
    survey:
      allOf:
        - type: object
          description: a survey with questions
          properties:
            key: 
              $ref: '#/components/schemas/key'
            name:
              type: string
            questions_order:
              type: array
              items:
                type: string
            questions:
              type: array
              items:
                $ref: '#/components/schemas/question'        
            answer_formats:
              type: array
              items:
                $ref: '#/components/schemas/answer_format'
        - $ref: '#/components/schemas/i18n_i'
    question:
      type: object
      description: a question
      properties:
        key:
          type: string
        text:
          type: string
        notice:
          type: string
        answer_format:
          type: string
          enum: [agr_5_scale_tol_3_scale_abs]
        # there is a name and an explanation/notice [excerpt ??]
    answer_format:
      type: object
      description: an answer format
      properties:
        key: 
          $ref: '#/components/schemas/key'
        items:
          type: array
          items:
            $ref: '#/components/schemas/answer_format_item'
        tolerance:
          $ref: '#/components/schemas/answer_format_tolerance'
    answer_format_tolerance:
      type: object
      properties:
        absolute:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/answer_format_item'
    answer_format_item:
      type: object    
      properties:
        key: 
          $ref: '#/components/schemas/key' # trouble with this in swagger_uis
        name:
          type: string
        weight:
          type: integer # TODO find format for double 
    submission:
      type: object
      description: Answers submission
      properties:
        id:
          $ref: '#/components/schemas/id'
        time:
          readOnly: true
          type: string
          format: datetime
        poll_key:
          $ref: '#/components/schemas/poll_key'
        survey_key:
          $ref: '#/components/schemas/survey_key'
        segment_key:
          $ref: '#/components/schemas/segment_key'
        user:
          $ref: '#/components/schemas/submission_user'
        incomplete:
          type: boolean          
          readOnly: true
          description: When this is a candidate or a party submission we need to know if all questions where answered
        answers:
          type: array
          items:
            $ref: '#/components/schemas/answer'
    submission_user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        age_level:
          type: string
          example: under_35
        last_election_vote_names:
          type: string          
    answer:
      type: object
      description: an answer
      properties:
        value:
          type: string
        tolerance:
          type: string
        question_key:
          $ref: '#/components/schemas/question_key'
    match:
      type: object
      description: Answers match submission
      properties:
        segment_key:
          $ref: '#/components/schemas/segment_key'
        answers:
          type: array
          items:
            $ref: '#/components/schemas/answer'
    match_response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/match_response_item'
    match_response_item:
      type: object
      properties:
        order:
          type: integer
        user_id:
          type: string
        score:
          type: double
          example: 75.3
    politician:
      type: object
      properties:
        id: 
          type: string
        first_name:
          type: string
        last_name:
          type: string

